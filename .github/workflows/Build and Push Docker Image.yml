name: Build and Push Docker Image

on:
  push:
    # 仅在推送 tag 时触发工作流
    # branches:
    #   - master  # 如果需要在 master 分支推送时也触发，取消这里的注释
    tags:
      - "*"  # 匹配所有 tag

env:
  # 设置 Docker Hub 相关环境变量
  DOCKER_HUB_USERNAME: cursor1st
  DOCKER_HUB_REPO: lxmusic

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # 在最新版本的 Ubuntu 运行器上执行

    steps:
      # 步骤1: 检出代码仓库
      - name: Check out the repo
        uses: actions/checkout@v4

      # 步骤2: 设置 QEMU，用于支持多架构构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤3: 设置 Docker Buildx，启用多架构构建功能
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 步骤4: 登录到 Docker Hub（在非 PR 的情况下执行）
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      
      # 步骤5: 提取 Docker 元数据，设置镜像标签
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_HUB_REPO }}
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{version}}
        
      # 步骤6: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .  # 构建上下文为当前目录
          platforms: linux/amd64,linux/arm64  # 同时构建 AMD64 和 ARM64 架构
          push: ${{ github.event_name != 'pull_request' }}  # 非 PR 时推送镜像
          tags: ${{ steps.meta.outputs.tags }}  # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }}  # 使用上一步生成的标签
          cache-from: type=gha  # 使用 GitHub Actions 缓存加速构建
          cache-to: type=gha,mode=max
          build-args: |
            MAKEFLAGS=-j4  # 设置构建参数，使用4个并行作业进行编译